buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath platform("org.grails:grails-bom:$grailsVersion")
        classpath "io.github.gradle-nexus:publish-plugin:2.0.0"
    }
}

ext {
    isCiBuild = (System.getenv().get("CI") as Boolean)
    isSnapshot = project.projectVersion.endsWith('-SNAPSHOT')
    isReleaseVersion = !isSnapshot
}

group = "org.grails"
version project.projectVersion

apply plugin: 'java-library'
apply plugin: 'idea'

allprojects { prj ->
    repositories {
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/core' }
        // mavenLocal() // Keep, this will be uncommented and used by CI (groovy-joint-workflow)
        if (groovyVersion?.endsWith('-SNAPSHOT')) {
            maven {
                name = 'ASF Snapshot repo'
                url = 'https://repository.apache.org/content/repositories/snapshots'
            }
        }

        if (System.getenv("GITHUB_MAVEN_PASSWORD") && !grailsVersion.endsWith('-SNAPSHOT')) {
            System.out.println("Adding Grails Core Repo for project: ${prj.name}")
            maven {
                url = 'https://maven.pkg.github.com/grails/grails-core'
                credentials {
                    username = 'DOES_NOT_MATTER'
                    password = System.getenv("GITHUB_MAVEN_PASSWORD")
                }
            }
        }
    }

    apply plugin: 'groovy'
}

if (isReleaseVersion) {
    apply plugin: "io.github.gradle-nexus.publish-plugin"

    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv('SONATYPE_USERNAME') ?: project.findProperty('sonatypeOssUsername') ?: ''
                def ossPass = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty('sonatypeOssPassword') ?: ''
                def ossStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: project.findProperty('sonatypeOssStagingProfileId') ?: ''
                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
        transitionCheckOptions {
            maxRetries.set(60)
            delayBetween.set(java.time.Duration.ofMillis(4000))
        }
    }

    //do not generate extra load on Nexus with new staging repository if signing fails
    tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
        shouldRunAfter(tasks.withType(Sign))
    }
}

apply from: rootProject.layout.projectDirectory.file('gradle/aggregate-groovydoc.gradle')