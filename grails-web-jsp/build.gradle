version = projectVersion
group = 'org.grails'

apply plugin: 'groovy'
apply plugin: 'java-library'

dependencies {

    implementation platform("org.grails:grails-bom:$grailsVersion")

    api project(':grails-web-gsp'), { // GroovyPagesServlet is used in public API (used in servlet context attribute value)
/*
        // API dependencies in grails-web-gsp
        exclude group: 'org.grails', module: 'grails-gsp'
        exclude group: 'org.grails', module: 'grails-web-common'
        exclude group: 'org.grails', module: 'grails-web-taglib'
*/
    }

    implementation project(':grails-gsp'), { // GroovyPage
/*
        // API dependencies in grails-gsp
        //exclude group: 'org.grails', module: 'grails-bootstrap' // Resource is used
        exclude group: 'org.grails', module: 'grails-encoder'
        exclude group: 'org.apache.groovy', module: 'groovy-templates'
        // Implementation dependencies in grails-gsp
        exclude group: 'org.grails', module: 'grails-taglib'
*/
    }
    implementation project(':grails-taglib'), { // GrailsTagLibClass, TagLibArtefactHandler, GrailsTagException
/*
        // API dependencies in grails-taglib
        exclude group: 'org.grails', module: 'grails-core'
        exclude group: 'org.grails', module: 'grails-encoder'
        exclude group: 'org.springframework', module: 'spring-core'
*/
    }
    implementation 'org.grails:grails-core', { // Holders
/*
        // API dependencies in grails-core
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'jakarta.inject', module: 'jakarta.inject-api'
        exclude group: 'jakarta.persistence', module: 'jakarta.persistence-api'
        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api'
        //exclude group: 'org.grails', module: 'grails-bootstrap' // Resource is used
        //exclude group: 'org.grails', module: 'grails-datastore-core' // MappingContext
        exclude group: 'org.grails', module: 'grails-spring'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'org.springframework', module: 'spring-beans'
        exclude group: 'org.springframework', module: 'spring-core'
        exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'org.springframework', module: 'spring-tx'
        exclude group: 'org.springframework.boot', module: 'spring-boot'
        exclude group: 'org.springframework.boot', module: 'spring-boot-autoconfigure'
*/
    }
    implementation 'org.grails:grails-encoder', { // StreamCharBuffer
/*
        // API dependencies in grails-encoder
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'org.apache.groovy', module: 'groovy-json'
        exclude group: 'org.grails', module: 'grails-core'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.springframework', module: 'spring-web'
*/
    }
    implementation 'org.grails:grails-web-common', { // GrailsWebRequest
/*
        // API dependencies in grails-web-common
        exclude group: 'org.grails', module: 'grails-core'
        exclude group: 'org.grails', module: 'grails-databinding'
        exclude group: 'org.grails', module: 'grails-encoder'
        exclude group: 'org.apache.groovy', module: 'groovy-templates'
        //exclude group: 'org.springframework', module: 'spring-webmvc' // DispatcherServletWebRequest
        exclude group: 'org.springframework', module: 'spring-context-support'
*/
    }

    compileOnly 'jakarta.servlet:jakarta.servlet-api' // Provided by servlet container
    compileOnly "jakarta.servlet.jsp:jakarta.servlet.jsp-api:$jspApiVersion" // Provided by servlet container
    compileOnly "jakarta.el:jakarta.el-api:$elApiVersion" // Provided by servlet container
}

apply from: rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/test-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/publish-config.gradle')
