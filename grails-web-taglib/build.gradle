plugins {
    id 'java-library'
    id 'groovy'
}

version = projectVersion
group = 'org.grails'

dependencies {

    implementation platform("org.grails:grails-bom:$grailsVersion")

    compileOnlyApi 'jakarta.annotation:jakarta.annotation-api'
    compileOnlyApi 'jakarta.servlet:jakarta.servlet-api' // Needed downstream to compile for TagLibrary trait

    api 'org.grails:grails-core', { // ArtefactTypeAstTransformation
        // API dependencies in grails-core
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'jakarta.inject', module: 'jakarta.inject-api'
        exclude group: 'jakarta.persistence', module: 'jakarta.persistence-api'
        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api'
        //exclude group: 'org.grails', module: 'grails-bootstrap' // Resource
        //exclude group: 'org.grails', module: 'grails-datastore-core' // MappingContext
        exclude group: 'org.grails', module: 'grails-spring'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.yaml', module: 'snakeyaml'
        exclude group: 'org.springframework', module: 'spring-beans'
        exclude group: 'org.springframework', module: 'spring-core'
        exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'org.springframework', module: 'spring-tx'
        exclude group: 'org.springframework.boot', module: 'spring-boot'
        exclude group: 'org.springframework.boot', module: 'spring-boot-autoconfigure'
    }
    api project(':grails-taglib'), { // TagLibArtefactHandler, TagOutput, OutputContextLookupHelper, AbstractTemplateVariableBinding, TemplateVariableBinding, OutputContextLookup, OutputContext, OutputEncodingStack, AbstractTemplateVariableBinding
        // API dependencies in grails-taglib
        exclude group: 'org.grails', module: 'grails-core'
        exclude group: 'org.grails', module: 'grails-encoder'
        exclude group: 'org.springframework', module: 'spring-core'
    }
    api 'org.grails:grails-encoder', { // EncodingStateRegistry
        // API dependencies in grails-encoder
        exclude group: 'org.apache.groovy', module: 'groovy'
        exclude group: 'org.apache.groovy', module: 'groovy-json'
        exclude group: 'org.grails', module: 'grails-core'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'org.springframework', module: 'spring-web'
    }
    api 'org.grails:grails-web-common', { // WrappedResponseHolder, GrailsWebRequest, GrailsApplicationAttributes, WebUtils
        // API dependencies in grails-web-common
        exclude group: 'org.grails', module: 'grails-core'
        exclude group: 'org.grails', module: 'grails-databinding'
        exclude group: 'org.grails', module: 'grails-encoder'
        exclude group: 'org.apache.groovy', module: 'groovy-templates'
        //exclude group: 'org.springframework', module: 'spring-webmvc' // DispatcherServlet
        exclude group: 'org.springframework', module: 'spring-context-support'
    }

    implementation 'org.springframework:spring-context' // ApplicationContext

    compileOnly project(':grails-gsp'), { // ResourceAwareTemplateEngine
        // API dependencies in grails-gsp
        exclude group: 'org.grails', module: 'grails-bootstrap'
        exclude group: 'org.apache.groovy', module: 'groovy-templates'
    }

    testImplementation project(':grails-gsp')
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.springframework:spring-test'

    testRuntimeOnly 'jakarta.servlet:jakarta.servlet-api'
    testRuntimeOnly 'org.slf4j:slf4j-nop' // Get rid of warning about missing slf4j implementation during tests
}

// work around for issue #10118
compileGroovy.doLast {
    // unfortunate workaround, since the generated one overrides the one in src/main/resources
    final String compileGroovyTargetDir = tasks.compileGroovy.destinationDirectory.getAsFile().getOrNull()?.path ?: "build/classes/groovy/main"
    project.delete(compileGroovyTargetDir + "/META-INF/grails.factories")
}

apply from: rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/test-config.gradle')
apply from: rootProject.layout.projectDirectory.file('gradle/publish-config.gradle')