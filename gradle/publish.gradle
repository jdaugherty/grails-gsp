apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    def u = System.getenv('ARTIFACTORY_USERNAME') ?: project.findProperty('artifactoryPublishUsername') ?: ''
                    def p = System.getenv('ARTIFACTORY_PASSWORD') ?: project.findProperty('artifactoryPublishPassword') ?: ''
                    username = u
                    password = p
                }
                if (project.group == 'org.grails.plugins') {
                    url "https://repo.grails.org/grails/plugins3-snapshots-local"
                } else {
                    url "https://repo.grails.org/grails/libs-snapshots-local"
                }
            }
        }
    }

    publications {
        maven(MavenPublication) {
            artifactId = project.name
            groupId = project.group
            version = project.version

            from components.java

            artifact sourcesJar
            artifact javadocJar

            if (project.group == 'org.grails.plugins') {
                artifact source: project.layout.buildDirectory.dir("classes/groovy/main/META-INF/grails-plugin.xml"),
                        classifier: "plugin",
                        extension: 'xml'
            }

            pom.withXml {
                def pomNode = asNode()

                // dependency management shouldn't be included
                try { pomNode.dependencyManagement.replaceNode({}) } catch (Throwable ignore) {}

                name = project.findProperty('title') ?: 'Groovy Server Pages (GSP)'
                description = project.findProperty('projectDesc') ?: 'Groovy Server Pages (GSP) - A server-side view rendering technology based on Groovy'
                url = projectUrl

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    for (dev in developers ?: [id: 'graemerocher', name: 'Graeme Rocher']) {
                        developer {
                            id dev.id
                            name dev.name
                        }
                    }
                }

                scm {
                    url "scm:git@github.com:${project.githubSlug}.git"
                    connection "scm:git@github.com:${project.githubSlug}.git"
                    developerConnection "scm:git@github.com:${project.githubSlug}.git"
                }
            }
        }
    }
}


afterEvaluate {
    signing {
        ext['signing.keyId'] = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY')
        ext['signing.password'] = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
        ext['signing.secretKeyRingFile'] = project.findProperty('signing.secretKeyRingFile') ?: "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"

        required {
            isReleaseVersion && gradle.taskGraph.hasTask('publish')
        }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}