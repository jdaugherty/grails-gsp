apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.set('isGrailsPlugin', project.group == 'org.grails.plugins')
ext.set('signing.keyId', project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY'))
ext.set('signing.password', project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE'))
ext.set('signing.secretKeyRingFile', project.findProperty('signing.secretKeyRingFile') ?: "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")

publishing {
    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    username = System.getenv('ARTIFACTORY_USERNAME') ?: project.findProperty('artifactoryPublishUsername') ?: ''
                    password = System.getenv('ARTIFACTORY_PASSWORD') ?: project.findProperty('artifactoryPublishPassword') ?: ''
                }
                url = isGrailsPlugin ?
                        'https://repo.grails.org/grails/plugins3-snapshots-local' :
                        'https://repo.grails.org/grails/libs-snapshots-local'
            }
        }
    }

    publications {
        maven(MavenPublication) {

            artifactId = project.findProperty('artifactId') ?: project.name
            groupId = project.group
            version = project.version

            from components.java

            pom {
                name = project.findProperty('pomTitle') ?: 'Groovy Server Pages (GSP)'
                description = project.findProperty('pomDescription') ?: 'Groovy Server Pages (GSP) - A server-side view rendering technology based on Groovy'
                url = project.findProperty('pomProjectUrl') ?: 'https://github.com/grails/grails-gsp'

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    for (dev in project.findProperty('pomDevelopers') ?: [[id: 'graemerocher', name: 'Graeme Rocher']]) {
                        developer {
                            id = dev.id
                            name = dev.name
                        }
                    }
                }

                scm {
                    url = 'scm:git@github.com:grails/grails-gsp.git'
                    connection = 'scm:git@github.com:grails/grails-gsp.git'
                    developerConnection = 'scm:git@github.com:grails/grails-gsp.git'
                }
            }

            // dependency management shouldn't be included
            pom.withXml {
                def pomNode = asNode()
                try { pomNode.dependencyManagement.replaceNode({}) } catch (Throwable ignore) {}
            }
        }
    }
}

afterEvaluate {
    signing {
        required = { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
        sign(publishing.publications.maven)
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}