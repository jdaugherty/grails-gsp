dependencies {
    testImplementation "jakarta.servlet:jakarta.servlet-api"
    testImplementation "org.apache.groovy:groovy-test-junit5:$groovyVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.platform:junit-platform-runner"
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.springframework:spring-test"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    if (isCiBuild) {
        maxParallelForks = project.findProperty('testMaxParallelFork') ?: 2
        forkEvery = project.findProperty('testForkEvery') ?: 0
    } else {
        maxParallelForks = project.findProperty('testMaxParallelFork') ?: 4
        forkEvery = project.findProperty('testForkEvery') ?: 0
    }

    if(project.findProperty('testJvmArgs')) {
        jvmArgs = project.findProperty('testJvmArgs')
    }

    afterSuite {
        System.out.print('.')
        System.out.flush()
    }
}