
tasks.register('cleanDocs', Delete) {
    delete rootProject.layout.buildDirectory.dir('docs')
}

tasks.register('aggregateGroovydoc', Groovydoc) {
    def groovyDocProjects = rootProject.subprojects.findAll { it.name != 'docs' && !it.name.startsWith('examples') }.findAll { it.file('src/main/groovy').exists() }
    dependsOn = [tasks.named('cleanDocs')] + groovyDocProjects.collect { it.tasks.named('groovydoc') }

    docTitle = "Groovy Server Pages (GSP) - ${project.name} - ${project.version}"
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = 'Copies Groovy API Documentation for all supporting projects'
    destinationDir = project.layout.buildDirectory.dir('docs/api').get().asFile
    source = files(groovyDocProjects.collect { Project project -> project.files("src/main/groovy") })
    classpath = files(groovyDocProjects.collect { Project project -> project.configurations.compileClasspath })
}

tasks.register('docs') {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    dependsOn = ['aggregateGroovydoc', 'docs:publishGuide']
    finalizedBy 'copyGuide'
}

tasks.register('copyGuide', Copy) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    from "${rootProject.allprojects.find { it.name == 'docs'}.projectDir}/build/docs"
    includes = ['**']
    into rootProject.layout.buildDirectory.dir('docs')
    includeEmptyDirs = false
}
