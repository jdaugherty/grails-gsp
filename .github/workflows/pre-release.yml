name: "🖨️ Pre Release"
on:
  workflow_dispatch:
    inputs:
      targetVersion:
        description: 'Expected Release Version'
        required: true
env:
  GIT_USER_NAME: 'grails-build'
  GIT_USER_EMAIL: 'grails-build@users.noreply.github.com'
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: "Purge Existing Builds - org.grails.grails-gsp"
        run: |
          curl -L \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/orgs/grails/packages/maven/org.grails.grails-gsp
#      - name: "Purge Existing Builds - org.grails.grails-taglib"
#        uses: actions/delete-package-versions@v5
#        with:
#          package-name: "org.grails.grails-taglib"
#          package-type: "maven"
#          min-versions-to-keep: 0
#      - name: "Purge Existing Builds - org.grails.grails-web-gsp-taglib"
#        uses: actions/delete-package-versions@v5
#        with:
#          package-name: "org.grails.grails-web-gsp-taglib"
#          package-type: "maven"
#          min-versions-to-keep: 0
#      - name: "Purge Existing Builds - org.grails.grails-web-jsp"
#        uses: actions/delete-package-versions@v5
#        with:
#          package-name: "org.grails.grails-web-jsp"
#          package-type: "maven"
#          min-versions-to-keep: 0
#      - name: "Purge Existing Builds - org.grails.grails-web-gsp"
#        uses: actions/delete-package-versions@v5
#        with:
#          package-name: "org.grails.grails-web-gsp"
#          package-type: "maven"
#          min-versions-to-keep: 0
#      - name: "Purge Existing Builds - org.grails.grails-web-taglib"
#        uses: actions/delete-package-versions@v5
#        with:
#          package-name: "org.grails.grails-web-taglib"
#          package-type: "maven"
#          min-versions-to-keep: 0
#      - name: "Purge Existing Builds - org.grails.plugins.gsp"
#        uses: actions/delete-package-versions@v5
#        with:
#          package-name: "org.grails.plugins.gsp"
#          package-type: "maven"
#          min-versions-to-keep: 0
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
      - name: "Set Prevent Snapshot Publishing Flag"
        run: |
          sed -i "s/^projectVersion.*$/preventSnapshotPublish\=true/" gradle.properties
      - name: "Commit flag to prevent snapshot publishing"
        run: |
          git config user.name "${{ env.GIT_USER_NAME }}"
          git config user.email "${{ env.GIT_USER_EMAIL }}"
          git add gradle.properties
          if ! git diff --cached --quiet; then
            git commit -m "[skip ci] Pre Release - ${{ github.event.inputs.targetVersion }} - Preventing Snapshot Publishing"
            git push origin HEAD
          else
            echo "Publishing already disabled."
          fi
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: '17'
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
      - name: "⚙ Set version to ${{ github.event.inputs.targetVersion }}"
        run: |
          sed -i "s/^projectVersion.*$/projectVersion\=${{ github.event.inputs.targetVersion }}/" gradle.properties
          cat gradle.properties
      - name: "🧩 Run Assemble"
        if: success()
        run: ./gradlew assemble
        env:
          SITEMESH_MAVEN_PASSWORD: ${{ secrets.GH_TOKEN }}
      - name: "🔐 Generate key file for artifact signing"
        env:
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: echo $SECRING_FILE | base64 -d > ${{ github.workspace }}/secring.gpg
      - name: "📤 Publish to GitHub Packages"
        id: publish
        env:
          SITEMESH_MAVEN_PASSWORD: ${{ secrets.GH_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PUBLISH: 'true'
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SECRING_FILE: ${{ secrets.SECRING_FILE }}
        run: >
          ./gradlew
          -Psigning.secretKeyRingFile=${{ github.workspace }}/secring.gpg 
          publish